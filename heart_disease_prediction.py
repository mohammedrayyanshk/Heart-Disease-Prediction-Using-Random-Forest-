# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14r6YgXZxngN4S3ElGgkuMDQw0Bfoga2M
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("rishidamarla/heart-disease-prediction")

print("Path to dataset files:", path)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load Dataset (Replace 'heart_disease.csv' with your actual file path)
data = pd.read_csv("/content/sample_data/Heart_Disease_Prediction.csv")

# Separating Features and Target Variable
X = data.drop(columns=["Heart Disease"])  # Features
y = data["Heart Disease"]  # Target (1 = Disease, 0 = No Disease)

# Split Dataset into Training and Testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest Model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions on Test Data
y_pred = model.predict(X_test)

# Print Dataset
print("\nFirst 5 Rows of the Dataset:\n", data.head())

# Print Model Training Confirmation
print("\nRandom Forest Model Trained Successfully!")

# Print Model Accuracy
print("\nModel Accuracy:", accuracy_score(y_test, y_pred))

# Print Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Print Confusion Matrix
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Start while loop
while True:
    print("\nEnter Patient Details to Predict Heart Disease (Enter 0 to Exit)")

    try:
        age = int(input("Enter Age (or 0 to exit): "))
        if age == 0:
            print("Exiting...")
            break  # Exit loop

        user_data = [
            age,
            int(input("Enter Sex (0 for Male, 1 for Female): ")),
            int(input("Enter Chest Pain Type (0-3): ")),
            int(input("Enter BP: ")),
            int(input("Enter Cholesterol: ")),
            int(input("Enter FBS over 120 (0 for No, 1 for Yes): ")),
            int(input("Enter EKG results (0-2): ")),
            int(input("Enter Max HR: ")),
            int(input("Enter Exercise angina (0 for No, 1 for Yes): ")),
            float(input("Enter ST depression: ")),
            int(input("Enter Slope of ST (0-2): ")),
            int(input("Enter Number of vessels fluro: ")),
            int(input("Enter Thallium (0-2): "))
        ]

        # Predicting Heart Disease
        prediction = model.predict([user_data])[0]
        print("\nPrediction Result:", "Heart Disease" if prediction == 1 else "No Heart Disease")

    except ValueError:
        print("Invalid input! Please enter correct values.")